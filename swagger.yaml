openapi: 3.0.0
info:
  version: 1.0.0
  title: 'MY STORE API'
  description: 'This is an Ecommerce API specification. The API will provide essential functionality for managing products, user accounts, shopping carts, orders, payments, and more. It will be accessible via RESTful endpoints to support both web and mobile clients.'
  contact:
    name: Rezuan Ahmed
    url: https://github.com/Rezuan-Ahmed-git
    email: rezuanahmed.dev@gmail.com
servers:
  - description: Dev
    url: 'http://localhost:4000/api/v1'
tags: 
  - name: Auth
    description: Authentication Endpoints (public)
  - name: Product
    description: Product Endpoints (public + private)
  - name: User
    description: User Endpoints (private)
  - name: Cart
    description: Cart Endpoints (private)
paths:
  '/auth/register':
    post:
      description: create a new account
      tags: [Auth]
      requestBody:
        content:
          'application/json':
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  example: Rezuan
                lastName:
                  type: string
                  example: Ahmed
                email:
                  type: string
                  format: email
                  example: rezuanahmed.dev@gmail.com
                mobile:
                  type: string
                  example: +880 111 111 
                password:
                  type: string
                  format: password
                  example: password1234
                address:
                  type: string
                  example: Dhaka, Bangladesh
              required: [firstName, lastName,email, mobile, password, address]
      responses:
        '201':
          description: Registered successsfully
          content:
            'application/json':
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 201
                  message:
                    type: string
                    example: Register successful
                  data:
                    type: object
                    properties:
                      access_token:
                        type: string
                        example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c'
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            example: '/auth/register'
                          login:
                            type: string
                            example: '/auth/login'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
  '/auth/login':
    post:
      description: Log in to your account
      tags: [Auth]
      requestBody:
        content:
          'application/json':
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: rezuanahmed.dev@gmail.com
                password:
                  type: string
                  format: password
                  example: password1234
              required: [email,  password]
      responses:
        '200':
          description: Logged in successfully
          content:
            'application/json':
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: Login successful
                  data:
                    type: object
                    properties:
                      access_token:
                        type: string
                        example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c'
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            example: '/auth/login'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
  '/products':
    get:
      tags: [Product]
      description: Fetch all products
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/sortTypeParam'
        - $ref: '#/components/parameters/sortByParam'
        - $ref: '#/components/parameters/searchParam'
      responses:
        '200': 
          description: Return a list of products
          content: 
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/Product'
                        - $ref: '#/components/schemas/Timestamp'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: url
                        example: '/products?page=2&limi=10'
                      next:
                        type: string
                        format: url
                        example: '/products?page=3&limit=10'
                      prev:
                        type: string
                        format: url
                        example: '/products?page=1&limit=10'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
    post:
      operationId: createProduct
      security:
        - bearerAuth: []
      tags: [Product]
      description: Create a new product
      requestBody:
        description: To create a new Product user must need to provide valid data
        content:
          'application/json':
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: Apple Watch
                description:
                  type: string
                  example: It's an amazing watch
                price:
                  type: integer
                  example: 1000
                category:
                  type: string
                  example: watch
                brand:
                  type: string
                  example: Apple
                quatity:
                  type: string
                  example: 110
                images:
                  type: array
                  items: 
                    type: object
                    properties:
                      url:
                        type: string
                        format: url
                        example: http://cloudinary.image.1 
              required:
                - title
                - price
                - category
                - brand
                - quantity
      responses:
        '201':
          description: Successfully created a new product
          content:
            'application/json':
              schema:
                type: object
                properties:
                  code: 
                    type: integer
                    format: int32
                    example: 201
                  message:
                    type: string
                    example: Product created successfully
                  data:
                    $ref: '#/components/schemas/Product'
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: url
                        example: '/products/1'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  '/products/{id}':
    get:
      tags: [Product]
      description: Fetch a single product
      parameters: 
       - $ref: '#/components/parameters/idPathParam'
      responses:
        '200':
          description: Single Product view
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    allOf:
                        - $ref: '#/components/schemas/Product'
                        - $ref: '#/components/schemas/Timestamp'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    put:
      security:
        - bearerAuth: []
      tags: [Product]
      description: Update a single product
      parameters: 
        - $ref: '#/components/parameters/idPathParam'
      requestBody:
        content:
          'application/json':
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: Apple Watch
                description:
                  type: string
                  example: It's an amazing watch
                price:
                  type: integer
                  example: 1000
                category:
                  type: string
                  example: watch
                brand:
                  type: string
                  example: Apple
                quatity:
                  type: string
                  example: 110
                images:
                  type: array
                  items: 
                    type: object
                    properties:
                      url:
                        type: string
                        format: url
                        example: http://cloudinary.image.1
      responses:
        '200':
          description: Single Product view
          content:
            'application/json':
              schema:
                type: object
                properties:
                  code: 
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: Product updated successfully
                  data:
                    allOf:
                        - $ref: '#/components/schemas/Product'
                        - $ref: '#/components/schemas/Timestamp'
        '201':
          description: Single Product view
          content:
            'application/json':
              schema:
                type: object
                properties:
                  code: 
                    type: integer
                    format: int32
                    example: 201
                  message:
                    type: string
                    example: Product created successfully
                  data:
                    allOf:
                        - $ref: '#/components/schemas/Product'
                        - $ref: '#/components/schemas/Timestamp'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    patch:
      security:
        - bearerAuth: []
      tags: [Product]
      description: Partially update a single product
      parameters: 
        - $ref: '#/components/parameters/idPathParam'
      requestBody:
        content:
          'application/json':
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: Apple Watch
                description:
                  type: string
                  example: It's an amazing watch
                price:
                  type: integer
                  example: 1000
                category:
                  type: string
                  example: watch
                brand:
                  type: string
                  example: Apple
                quatity:
                  type: string
                  example: 110
                images:
                  type: array
                  items: 
                    type: object
                    properties:
                      url:
                        type: string
                        format: url
                        example: http://cloudinary.image.1
      responses:
        '200':
          description: Single Product view
          content:
            'application/json':
              schema:
                type: object
                properties:
                  code: 
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: Product updated successfully
                  data:
                    allOf:
                        - $ref: '#/components/schemas/Product'
                        - $ref: '#/components/schemas/Timestamp'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    delete:
      security:
        - bearerAuth: []
      tags: [Product]
      description: Delete a product by id
      parameters:
        - $ref: '#/components/parameters/idPathParam'
      responses:
        '204':
          description: 'Product deleted successfully'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  '/users':
    get:
      security:
        - bearerAuth: []
      tags: [User]
      description: Fetch all users
      responses:
        '200':
          description: Return a list of users
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                     $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
  '/users/{id}':
    get:
      security:
        - bearerAuth: []
      tags: [User]
      description: Fetch a single user by id
      parameters:
        - $ref: '#/components/parameters/userIdPathParam'
      responses:
        '200':
          description: Single User view
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    allOf:
                        - $ref: '#/components/schemas/User'
                        - $ref: '#/components/schemas/Timestamp'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    delete:
      security:
        - bearerAuth: []
      tags: [User]
      description: Delete a user by id
      parameters:
        - $ref: '#/components/parameters/userIdPathParam'
      responses:
        '204':
          description: 'User deleted successfully'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  '/users/cart':
    get:
      security:
        - bearerAuth: []
      tags: [Cart]
      description: Fetch cart details
      responses:
        '200':
          description: Showing products on cart
          content:
            'application/json':
              schema:
                type: object
                properties:
                  _id:
                    type: string
                    example: '6509543420e0d7cbb595aeab'
                  products: 
                    type: array
                    items:
                      type: object
                      properties:
                        product:
                          type: object
                          properties:
                            _id: 
                              type: string
                              example: 'alsdkflajfdajsdf'
                            title:
                                type: string
                                example: 'Apple Watch'
                            price:
                              type: number
                              example: 200
                        count:
                          type: number
                          example: 2
                        price:
                          type: number
                          example: 200
                        _id:
                          type: string
                          example: 'asdflasdjkflajsdf'
                  cartTotal: 
                    type: number
                    example: 1000
                  orderBy:
                    type: string
                    example: 'asldkfladflj'
              
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    post:
      security:
        - bearerAuth: []
      tags: [Cart]
      description: Add products to the cart
      requestBody:
        description:  To add Products or Product to the cart, user must need to provide valid data
        content:
          'application/json':
            schema:
              type: object
              properties:
                _id:
                  type: string
                  example: "6506658865f0139925d30fa1"
                count:
                  type: number
                  example: 1
              required: 
                - _id
                - count
      responses:
        '201':
          description: Add products to the cart
          content:
            'application/json':
              schema:
                type: object
                properties:
                  code: 
                    type: integer
                    format: int32
                    example: 201
                  message:
                    type: string
                    example: Product added to the cart successfully
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  '/users/empty-cart':
    delete:
      security:
        - bearerAuth: []
      tags: [Cart]
      description: Empty the whole cart
      responses:
        '204':
          description: 'Cart is cleared successfully'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
     
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Product:
        type: object
        properties:
          id: 
            type: string
            example: '6505ae71960ec73604075938'
          title:
            type: string
            example: Apple Watch
          slug:
            type: string
            example: apple-watch
          description: 
            type: string
            example: It's an amazing product
          price: 
            type: integer
            format: int32
            example: 750
          category:
            type: string
            example: watch
          brand: 
            type: string
            example: Apple
          sold:
            type: integer
            format: int32
            example: 5
          quantity:
            type: integer
            format: int32
            example: 100
          images:
            type: array
            items: 
              type: object
              properties:
                url:
                  type: string
                  format: url
                  example: http://cloudinary.image.1 
          link:
            type: string
            format: url
            example: '/products/1'
    User:
      type: object
      properties:
        id:
          type: string
          example: '6505ae71960ec73604075938'
        firstName: 
          type: string
          example: Rezuan
        lastName:
          type: string
          example: Ahmed
        email:
          type: string
          example: rezuanahmed.dev@gmail.com
        mobile:
          type: string
          example: +880 1625 7708 33
        password:
          type: string
          format: password
          example: 1234
        role:
          type: string
          example: user
          enum:
          - user
          - admin
        cart:
          type: array
          items:
           type: object
        address:
          type: string
          example: Dhaka, Bangladesh
        link:
          type: string
          format: url
          example: '/users/1'
    Timestamp:
      type: object
      properties:
        createAt:
          type: string
          format: date
        updateAt:
          type: string
          format: date
    Pagination:
      type: object
      properties:
        page:
          type: integer
          format: int32
          example: 2
        limit:
          type: integer
          format: int32
          example: 10
        next:
          type: integer
          format: int32
          example: 3
        prev:
          type: integer
          format: int32
          example: 1
        totalPage:
          type: integer
          format: int32
          example: 5
        totalItems:
          type: integer
          format: int32
          example: 50
      required:
        - page
        - limit
        - totalPage
        - totalItems
  responses:
    '500':
        description: 'Internal Server Error'
        content:
          'application/json':
            schema:
              type: object
              properties:
                code:
                  type: integer
                  format: int32
                  example: 500
                error:
                  type: string
                  example: Internal Server Error
                message:
                  type: string
                  example: we are sorry for the inconvinience. Please try again later
    '400':
      description: 'Bad Request'
      content:
        'application/json':
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 400
              error:
                type: string
                example: Bad Request
              data:
                type: array
                items:
                  type: object
                  properties:
                    field:
                      type: string
                      example: email
                    message:
                      type: string
                      example: Invalid email 
                    in:
                      type: string
                      enum: [query, body]
                      example: body
    '401':
      description: Unauthorized
      content:
        'application/json':
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 401
              error:
                type: string
                example: Unauthorized
              message:
                type: string
                example: You don't have the right permissions
    '404':
      description: Resource Not Found
      content:
        'application/json':
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 404
              error:
                type: string
                example: Not Found
              message:
                type: string
                example: Requested resource not found
  parameters:
    pageParam:
      in: query
      name: page
      description: current page number
      schema:
        type: integer
        format: int32
        example: 1
    limitParam:
      in: query
      name: limit
      description: maximum items to be returned
      schema:
        type: integer
        format: int32
        example: 10
    sortTypeParam:
      in: query
      name: sort_type
      description: type of sort (asc or dsc)
      schema:
        type: string
        enum: [asc,dsc]
        example: dsc
    sortByParam:
      in: query
      name: sort_by
      description: Sort key
      schema:
        type: string
        example: category
    searchParam:
      in: query
      name: search
      description: Search term
      schema:
        type: string
        example: title
    idPathParam:
      in: path
      name: id
      required: true
      description: Product Id
      schema:
        type: string
        example: '6505ae71960ec73604075938'
    userIdPathParam:
      in: path
      name: id
      required: true
      description: User Id
      schema:
        type: string
        example: '6505ae71960ec73604075938'